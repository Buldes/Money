{"ast":null,"code":"import { victoryLineData } from \"../../Data/list\";\nimport { incomCostMonthly } from \"../Analyse/IncomCostPerMonth\";\nimport { GetMonthData } from \"./MonthDataGenerate\";\nexport function CalculateChartData() {\n  //Get month data\n  var monthData = GetMonthData();\n\n  //set Variable\n  var beforeDay = 0;\n\n  //'Month'\n  monthData.forEach(element => {\n    //check if day is the same\n    if (beforeDay === element.date.day) {\n      //refresh old datas\n\n      //check if element is cost or incomm\n      if (element.state === \"Einkommen\") {\n        victoryLineData[0][1][parseFloat(element.date.day - 1)].y = parseFloat(victoryLineData[0][1][parseFloat(element.date.day - 1)].y) + parseFloat(element.amount);\n      } else if (element.state === \"Ausgaben\") {\n        victoryLineData[0][2][parseFloat(element.date.day - 1)].y = parseFloat(victoryLineData[0][2][parseFloat(element.date.day - 1)].y) + parseFloat(element.amount);\n      }\n    } else {\n      // set new data\n      if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day - 1].y = element.bankBalance;\n      if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day - 1].y = element.amount;else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day - 1].y = element.amount;\n    }\n\n    //set day for next\n    beforeDay = element.date.day;\n  });\n\n  //'Year'\n\n  var cachyear = [];\n  var cachLastYear = [];\n  for (let num = 1; num <= new Date().getMonth(); num++) {\n    // add data to cach year from january to know\n    cachyear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount]);\n  }\n  // add curent to cache\n  cachyear.push([incomCostMonthly.current[0].amount, incomCostMonthly.current[1].amount]);\n\n  // add rest from last year\n  for (let num = new Date().getMonth() + 1; num < 13; num++) {\n    cachLastYear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount]);\n  }\n\n  // mix together\n  cachyear.forEach(element => {\n    cachLastYear.push(element);\n  });\n\n  // add ro list\n  var num = 0;\n  cachLastYear.forEach(element => {\n    num++;\n    victoryLineData[1][1][num - 1].y = element[0];\n    victoryLineData[1][2][num - 1].y = element[1];\n  });\n}\n_c = CalculateChartData;\nvar _c;\n$RefreshReg$(_c, \"CalculateChartData\");","map":{"version":3,"names":["victoryLineData","incomCostMonthly","GetMonthData","CalculateChartData","monthData","beforeDay","forEach","element","date","day","state","parseFloat","y","amount","bankBalance","cachyear","cachLastYear","num","Date","getMonth","push","current","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Desktop/Website/money-support/src/Functions/DataFunctions/ChartData.js"],"sourcesContent":["import {  victoryLineData } from \"../../Data/list\";\r\nimport { incomCostMonthly } from \"../Analyse/IncomCostPerMonth\";\r\nimport { GetMonthData } from \"./MonthDataGenerate\";\r\n\r\nexport function CalculateChartData(){\r\n    //Get month data\r\n    var monthData = GetMonthData()\r\n    \r\n    //set Variable\r\n    var beforeDay = 0\r\n\r\n    //'Month'\r\n    monthData.forEach(element => {\r\n        //check if day is the same\r\n        if (beforeDay === element.date.day){\r\n\r\n            //refresh old datas\r\n\r\n            //check if element is cost or incomm\r\n            if (element.state === \"Einkommen\"){\r\n                victoryLineData[0][1][parseFloat(element.date.day - 1)].y = parseFloat(victoryLineData[0][1][parseFloat(element.date.day - 1)].y) + parseFloat(element.amount)\r\n            }\r\n            else if (element.state === \"Ausgaben\"){\r\n                victoryLineData[0][2][parseFloat(element.date.day - 1)].y = parseFloat(victoryLineData[0][2][parseFloat(element.date.day - 1)].y) + parseFloat(element.amount)\r\n            }\r\n        \r\n        }\r\n        else{\r\n            // set new data\r\n            if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day - 1].y = element.bankBalance\r\n\r\n            if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day - 1].y = element.amount\r\n            else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day - 1].y = element.amount\r\n        }\r\n\r\n        //set day for next\r\n        beforeDay = element.date.day\r\n    });\r\n\r\n    //'Year'\r\n\r\n    var cachyear = []\r\n    var cachLastYear = []\r\n\r\n\r\n    for (let num = 1; num <= new Date().getMonth(); num++){\r\n        // add data to cach year from january to know\r\n        cachyear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount])\r\n    }\r\n    // add curent to cache\r\n    cachyear.push([incomCostMonthly.current[0].amount, incomCostMonthly.current[1].amount])\r\n\r\n    // add rest from last year\r\n    for (let num = new Date().getMonth() + 1; num < 13; num ++){\r\n        cachLastYear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount])\r\n    }\r\n\r\n    // mix together\r\n    cachyear.forEach(element => {\r\n        cachLastYear.push(element)\r\n    });\r\n\r\n    // add ro list\r\n    var num = 0\r\n    cachLastYear.forEach(element => {\r\n        num++\r\n        victoryLineData[1][1][num - 1].y = element[0]\r\n        victoryLineData[1][2][num - 1].y = element[1]\r\n    });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}