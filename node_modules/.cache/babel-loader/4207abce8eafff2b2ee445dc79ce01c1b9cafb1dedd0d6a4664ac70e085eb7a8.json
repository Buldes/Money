{"ast":null,"code":"import { setVictoryLineData, victoryLineData } from \"../../Data/list\";\nimport { GetMonthData } from \"./MonthDataGenerate\";\nexport function CalculateChartData() {\n  //Get month data\n  var monthData = GetMonthData();\n  console.log(monthData);\n\n  //set Variable\n  var beforeDay = 0;\n  monthData.forEach(element => {\n    //check if day is the same\n    if (beforeDay === element.date.day) {\n      //refresh old data\n      var newDailyBankBalance = [];\n      var newDailyCost = [];\n      var newDailyIncomm = [];\n\n      // calculate newBankBalance\n      for (let num = 0; victoryLineData[0][0].length - 1 < num; num++) {\n        newDailyBankBalance.push(victoryLineData[0][0][num]);\n      }\n      newDailyBankBalance.push(parseFloat(victoryLineData[0][0][victoryLineData[0][0].length - 1]) + parseFloat(element.bankBalance));\n\n      //check if element is cost or incomm\n      if (element.state === \"Einkommen\") {\n        // calculate newIncomm\n        for (let num = 0; victoryLineData[0][1].length - 1 < num; num++) {\n          newDailyIncomm.push(victoryLineData[0][1][num]);\n        }\n        newDailyBankBalance.push(parseFloat(victoryLineData[0][1][victoryLineData[0][1].length - 1]) + parseFloat(element.amount));\n      } else {\n        // calculate newCost\n        for (let num = 0; victoryLineData[0][2].length - 1 < num; num++) {\n          newDailyCost.push(victoryLineData[0][2][num]);\n        }\n        newDailyCost.push(parseFloat(victoryLineData[0][2][victoryLineData[0][2].length - 1]) + parseFloat(element.amount));\n      }\n\n      // set new Data\n      setVictoryLineData([[newDailyBankBalance, newDailyIncomm, newDailyCost], victoryLineData[1]]);\n    } else {\n      // set new data\n      victoryLineData[0][0].push(element.bankBalance);\n      if (element.state === \"Einkommen\") victoryLineData[0][1].push(element.amount);else victoryLineData[0][2].push(element.amount);\n    }\n\n    //set day for next\n    beforeDay = element.date.day;\n  });\n  console.log(victoryLineData);\n}\n_c = CalculateChartData;\nvar _c;\n$RefreshReg$(_c, \"CalculateChartData\");","map":{"version":3,"names":["setVictoryLineData","victoryLineData","GetMonthData","CalculateChartData","monthData","console","log","beforeDay","forEach","element","date","day","newDailyBankBalance","newDailyCost","newDailyIncomm","num","length","push","parseFloat","bankBalance","state","amount","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Desktop/Website/money-support/src/Functions/DataFunctions/ChartData.js"],"sourcesContent":["import { setVictoryLineData, victoryLineData } from \"../../Data/list\";\r\nimport { GetMonthData } from \"./MonthDataGenerate\";\r\n\r\nexport function CalculateChartData(){\r\n    //Get month data\r\n    var monthData = GetMonthData()\r\n    console.log(monthData)\r\n    \r\n    //set Variable\r\n    var beforeDay = 0\r\n\r\n\r\n    monthData.forEach(element => {\r\n        //check if day is the same\r\n        if (beforeDay === element.date.day){\r\n            \r\n            //refresh old data\r\n            var newDailyBankBalance = []\r\n            var newDailyCost = []\r\n            var newDailyIncomm = []\r\n\r\n            // calculate newBankBalance\r\n            for (let num = 0; victoryLineData[0][0].length - 1 < num; num++){\r\n                newDailyBankBalance.push(victoryLineData[0][0][num])\r\n            }\r\n            newDailyBankBalance.push(parseFloat(victoryLineData[0][0][victoryLineData[0][0].length - 1]) + parseFloat(element.bankBalance))\r\n\r\n            //check if element is cost or incomm\r\n            if (element.state === \"Einkommen\"){\r\n                // calculate newIncomm\r\n                for (let num = 0; victoryLineData[0][1].length - 1 < num; num++){\r\n                    newDailyIncomm.push(victoryLineData[0][1][num])\r\n                }\r\n                newDailyBankBalance.push(parseFloat(victoryLineData[0][1][victoryLineData[0][1].length - 1]) + parseFloat(element.amount))\r\n            }\r\n            else{\r\n                // calculate newCost\r\n                for (let num = 0; victoryLineData[0][2].length - 1 < num; num++){\r\n                    newDailyCost.push(victoryLineData[0][2][num])\r\n                }\r\n                newDailyCost.push(parseFloat(victoryLineData[0][2][victoryLineData[0][2].length - 1]) + parseFloat(element.amount))\r\n            }\r\n        \r\n            // set new Data\r\n            setVictoryLineData([[newDailyBankBalance, newDailyIncomm, newDailyCost], victoryLineData[1]])\r\n        }\r\n        else{\r\n            // set new data\r\n            victoryLineData[0][0].push(element.bankBalance)\r\n\r\n            if (element.state === \"Einkommen\") victoryLineData[0][1].push(element.amount)\r\n            else victoryLineData[0][2].push(element.amount)\r\n        }\r\n\r\n        //set day for next\r\n        beforeDay = element.date.day\r\n    });\r\n\r\n    console.log(victoryLineData);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}