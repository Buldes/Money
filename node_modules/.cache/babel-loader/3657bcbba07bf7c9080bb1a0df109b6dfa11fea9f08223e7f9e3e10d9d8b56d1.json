{"ast":null,"code":"import { victoryLineData } from \"../../Data/list\";\nimport { incomCostMonthly } from \"../Analyse/IncomCostPerMonth\";\nimport { GetMonthData } from \"./MonthDataGenerate\";\nexport function CalculateChartData() {\n  //Get month data\n  var monthData = GetMonthData();\n  console.log(monthData);\n\n  //set Variable\n  var beforeDay = 0;\n\n  //'Month'\n  monthData.forEach(element => {\n    //check if day is the same\n    if (beforeDay === element.date.day) {\n      //refresh old datas\n\n      //check if element is cost or incomm\n      if (element.state === \"Einkommen\") {\n        victoryLineData[0][1][element.date.day] = parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount);\n        console.log(parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount));\n      } else if (element.state === \"Ausgaben\") {\n        victoryLineData[0][2][element.date.day] = parseFloat(victoryLineData[0][2][element.date.day]) + parseFloat(element.amount);\n      }\n    } else {\n      // set new data\n      if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day] = element.bankBalance;\n      if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day] = element.amount;else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day] = element.amount;\n    }\n\n    //set day for next\n    beforeDay = element.date.day;\n  });\n\n  //'Year'\n\n  var cachyear = [];\n  var cachLastYear = [];\n  console.log(incomCostMonthly);\n  for (let num = 1; num <= new Date().getFullYear() - 1; num++) {\n    // add data to cach year from january to know\n    cachyear.push(incomCostMonthly[num][0].amount);\n  }\n  // add curent to cache\n  cachyear.push(incomCostMonthly.current.amount);\n\n  // add rest from last year\n  for (let num = new Date().getFullYear(); num < 13; num++) {\n    cachLastYear.push(incomCostMonthly[num].amount);\n  }\n\n  // mix together\n  cachLastYear.push(cachyear);\n\n  // add ro list\n  var num = 0;\n  cachLastYear.forEach(element => {\n    num++;\n    victoryLineData[1][0][num] = element[0];\n    victoryLineData[1][1][num] = element[1];\n    console.log(element);\n  });\n  console.log(monthData);\n  console.log(victoryLineData);\n}\n_c = CalculateChartData;\nvar _c;\n$RefreshReg$(_c, \"CalculateChartData\");","map":{"version":3,"names":["victoryLineData","incomCostMonthly","GetMonthData","CalculateChartData","monthData","console","log","beforeDay","forEach","element","date","day","state","parseFloat","amount","bankBalance","cachyear","cachLastYear","num","Date","getFullYear","push","current","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Desktop/Website/money-support/src/Functions/DataFunctions/ChartData.js"],"sourcesContent":["import {  victoryLineData } from \"../../Data/list\";\r\nimport { incomCostMonthly } from \"../Analyse/IncomCostPerMonth\";\r\nimport { GetMonthData } from \"./MonthDataGenerate\";\r\n\r\nexport function CalculateChartData(){\r\n    //Get month data\r\n    var monthData = GetMonthData()\r\n    console.log(monthData)\r\n    \r\n    //set Variable\r\n    var beforeDay = 0\r\n\r\n    //'Month'\r\n    monthData.forEach(element => {\r\n        //check if day is the same\r\n        if (beforeDay === element.date.day){\r\n\r\n            //refresh old datas\r\n\r\n            //check if element is cost or incomm\r\n            if (element.state === \"Einkommen\"){\r\n                victoryLineData[0][1][element.date.day] = parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount)\r\n                console.log(parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount))\r\n            }\r\n            else if (element.state === \"Ausgaben\"){\r\n                victoryLineData[0][2][element.date.day] = parseFloat(victoryLineData[0][2][element.date.day]) + parseFloat(element.amount)\r\n            }\r\n        \r\n        }\r\n        else{\r\n            // set new data\r\n            if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day] = element.bankBalance\r\n\r\n            if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day] = element.amount\r\n            else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day] = element.amount\r\n        }\r\n\r\n        //set day for next\r\n        beforeDay = element.date.day\r\n    });\r\n\r\n    //'Year'\r\n\r\n    var cachyear = []\r\n    var cachLastYear = []\r\n\r\n    console.log(incomCostMonthly)\r\n    for (let num = 1; num <= new Date().getFullYear() - 1; num++){\r\n        // add data to cach year from january to know\r\n        cachyear.push(incomCostMonthly[num][0].amount)\r\n    }\r\n    // add curent to cache\r\n    cachyear.push(incomCostMonthly.current.amount)\r\n\r\n    // add rest from last year\r\n    for (let num = new Date().getFullYear(); num < 13; num ++){\r\n        cachLastYear.push(incomCostMonthly[num].amount)\r\n    }\r\n\r\n    // mix together\r\n    cachLastYear.push(cachyear)\r\n\r\n    // add ro list\r\n    var num = 0\r\n    cachLastYear.forEach(element => {\r\n        num++\r\n        victoryLineData[1][0][num] = element[0]\r\n        victoryLineData[1][1][num] = element[1]\r\n        console.log(element)\r\n    });\r\n\r\n    console.log(monthData)\r\n    console.log(victoryLineData);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}