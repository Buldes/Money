{"ast":null,"code":"import{victoryLineData}from\"../../Data/list\";import{incomCostMonthly}from\"../Analyse/IncomCostPerMonth\";import{GetMonthData}from\"./MonthDataGenerate\";export function CalculateChartData(){//Get month data\nvar monthData=GetMonthData();//set Variable\nvar beforeDay=0;//'Month'\nmonthData.forEach(function(element){//check if day is the same\nif(beforeDay===element.date.day){//refresh old datas\n//check if element is cost or incomm\nif(element.state===\"Einkommen\"){victoryLineData[0][1][element.date.day]=parseFloat(victoryLineData[0][1][element.date.day])+parseFloat(element.amount);}else if(element.state===\"Ausgaben\"){victoryLineData[0][2][element.date.day]=parseFloat(victoryLineData[0][2][element.date.day])+parseFloat(element.amount);}}else{// set new data\nif(element.state!==\"Initialization\")victoryLineData[0][0][element.date.day]=element.bankBalance;if(element.state===\"Einkommen\")victoryLineData[0][1][element.date.day]=element.amount;else if(element.state===\"Ausgaben\")victoryLineData[0][2][element.date.day]=element.amount;}//set day for next\nbeforeDay=element.date.day;});//'Year'\nvar cachyear=[];var cachLastYear=[];for(var _num=1;_num<=new Date().getMonth();_num++){// add data to cach year from january to know\ncachyear.push([incomCostMonthly[_num][0].amount,incomCostMonthly[_num][1].amount]);}// add curent to cache\ncachyear.push([incomCostMonthly.current[0].amount,incomCostMonthly.current[1].amount]);// add rest from last year\nfor(var _num2=new Date().getMonth()+1;_num2<13;_num2++){cachLastYear.push([incomCostMonthly[_num2][0].amount,incomCostMonthly[_num2][1].amount]);}// mix together\ncachyear.forEach(function(element){cachLastYear.push(element);});// add ro list\nvar num=0;cachLastYear.forEach(function(element){num++;victoryLineData[1][0][num]=element[0];victoryLineData[1][1][num]=element[1];});}","map":{"version":3,"names":["victoryLineData","incomCostMonthly","GetMonthData","CalculateChartData","monthData","beforeDay","forEach","element","date","day","state","parseFloat","amount","bankBalance","cachyear","cachLastYear","num","Date","getMonth","push","current"],"sources":["C:/Users/Kevin/Desktop/Website/money-support/src/Functions/DataFunctions/ChartData.js"],"sourcesContent":["import {  victoryLineData } from \"../../Data/list\";\r\nimport { incomCostMonthly } from \"../Analyse/IncomCostPerMonth\";\r\nimport { GetMonthData } from \"./MonthDataGenerate\";\r\n\r\nexport function CalculateChartData(){\r\n    //Get month data\r\n    var monthData = GetMonthData()\r\n    \r\n    //set Variable\r\n    var beforeDay = 0\r\n\r\n    //'Month'\r\n    monthData.forEach(element => {\r\n        //check if day is the same\r\n        if (beforeDay === element.date.day){\r\n\r\n            //refresh old datas\r\n\r\n            //check if element is cost or incomm\r\n            if (element.state === \"Einkommen\"){\r\n                victoryLineData[0][1][element.date.day] = parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount)\r\n            }\r\n            else if (element.state === \"Ausgaben\"){\r\n                victoryLineData[0][2][element.date.day] = parseFloat(victoryLineData[0][2][element.date.day]) + parseFloat(element.amount)\r\n            }\r\n        \r\n        }\r\n        else{\r\n            // set new data\r\n            if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day] = element.bankBalance\r\n\r\n            if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day] = element.amount\r\n            else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day] = element.amount\r\n        }\r\n\r\n        //set day for next\r\n        beforeDay = element.date.day\r\n    });\r\n\r\n    //'Year'\r\n\r\n    var cachyear = []\r\n    var cachLastYear = []\r\n\r\n\r\n    for (let num = 1; num <= new Date().getMonth(); num++){\r\n        // add data to cach year from january to know\r\n        cachyear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount])\r\n    }\r\n    // add curent to cache\r\n    cachyear.push([incomCostMonthly.current[0].amount, incomCostMonthly.current[1].amount])\r\n\r\n    // add rest from last year\r\n    for (let num = new Date().getMonth() + 1; num < 13; num ++){\r\n        cachLastYear.push([incomCostMonthly[num][0].amount, incomCostMonthly[num][1].amount])\r\n    }\r\n\r\n    // mix together\r\n    cachyear.forEach(element => {\r\n        cachLastYear.push(element)\r\n    });\r\n\r\n    // add ro list\r\n    var num = 0\r\n    cachLastYear.forEach(element => {\r\n        num++\r\n        victoryLineData[1][0][num] = element[0]\r\n        victoryLineData[1][1][num] = element[1]\r\n    });\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}