{"ast":null,"code":"import { victoryLineData } from \"../../Data/list\";\nimport { GetMonthData } from \"./MonthDataGenerate\";\nexport function CalculateChartData() {\n  //Get month data\n  var monthData = GetMonthData();\n  console.log(monthData);\n\n  //set Variable\n  var beforeDay = 0;\n  monthData.forEach(element => {\n    //check if day is the same\n    if (beforeDay === element.date.day) {\n      //refresh old datas\n\n      //check if element is cost or incomm\n      if (element.state === \"Einkommen\") {\n        victoryLineData[0][1][element.date.day] = parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount);\n      } else if (element.state === \"Ausgaben\") {\n        victoryLineData[0][2][element.date.day] = parseFloat(victoryLineData[0][2][element.date.day]) + parseFloat(element.amount);\n      }\n    } else {\n      // set new data\n      if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day] = element.bankBalance;\n      if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day] = element.amount;else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day] = element.amount;\n    }\n\n    //set day for next\n    beforeDay = element.date.day;\n  });\n  console.log(monthData);\n  console.log(victoryLineData);\n}\n_c = CalculateChartData;\nvar _c;\n$RefreshReg$(_c, \"CalculateChartData\");","map":{"version":3,"names":["victoryLineData","GetMonthData","CalculateChartData","monthData","console","log","beforeDay","forEach","element","date","day","state","parseFloat","amount","bankBalance","_c","$RefreshReg$"],"sources":["C:/Users/Kevin/Desktop/Website/money-support/src/Functions/DataFunctions/ChartData.js"],"sourcesContent":["import {  victoryLineData } from \"../../Data/list\";\r\nimport { GetMonthData } from \"./MonthDataGenerate\";\r\n\r\nexport function CalculateChartData(){\r\n    //Get month data\r\n    var monthData = GetMonthData()\r\n    console.log(monthData)\r\n    \r\n    //set Variable\r\n    var beforeDay = 0\r\n\r\n\r\n    monthData.forEach(element => {\r\n        //check if day is the same\r\n        if (beforeDay === element.date.day){\r\n\r\n            //refresh old datas\r\n\r\n            //check if element is cost or incomm\r\n            if (element.state === \"Einkommen\"){\r\n                victoryLineData[0][1][element.date.day] = parseFloat(victoryLineData[0][1][element.date.day]) + parseFloat(element.amount)\r\n            }\r\n            else if (element.state === \"Ausgaben\"){\r\n                victoryLineData[0][2][element.date.day] = parseFloat(victoryLineData[0][2][element.date.day]) + parseFloat(element.amount)\r\n            }\r\n        \r\n        }\r\n        else{\r\n            // set new data\r\n            if (element.state !== \"Initialization\") victoryLineData[0][0][element.date.day] = element.bankBalance\r\n\r\n            if (element.state === \"Einkommen\") victoryLineData[0][1][element.date.day] = element.amount\r\n            else if (element.state === \"Ausgaben\") victoryLineData[0][2][element.date.day] = element.amount\r\n        }\r\n\r\n        //set day for next\r\n        beforeDay = element.date.day\r\n    });\r\n\r\n    console.log(monthData)\r\n    console.log(victoryLineData);\r\n}"],"mappings":"AAAA,SAAUA,eAAe,QAAQ,iBAAiB;AAClD,SAASC,YAAY,QAAQ,qBAAqB;AAElD,OAAO,SAASC,kBAAkBA,CAAA,EAAE;EAChC;EACA,IAAIC,SAAS,GAAGF,YAAY,EAAE;EAC9BG,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;;EAEtB;EACA,IAAIG,SAAS,GAAG,CAAC;EAGjBH,SAAS,CAACI,OAAO,CAACC,OAAO,IAAI;IACzB;IACA,IAAIF,SAAS,KAAKE,OAAO,CAACC,IAAI,CAACC,GAAG,EAAC;MAE/B;;MAEA;MACA,IAAIF,OAAO,CAACG,KAAK,KAAK,WAAW,EAAC;QAC9BX,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGE,UAAU,CAACZ,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGE,UAAU,CAACJ,OAAO,CAACK,MAAM,CAAC;MAC9H,CAAC,MACI,IAAIL,OAAO,CAACG,KAAK,KAAK,UAAU,EAAC;QAClCX,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGE,UAAU,CAACZ,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGE,UAAU,CAACJ,OAAO,CAACK,MAAM,CAAC;MAC9H;IAEJ,CAAC,MACG;MACA;MACA,IAAIL,OAAO,CAACG,KAAK,KAAK,gBAAgB,EAAEX,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGF,OAAO,CAACM,WAAW;MAErG,IAAIN,OAAO,CAACG,KAAK,KAAK,WAAW,EAAEX,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGF,OAAO,CAACK,MAAM,MACtF,IAAIL,OAAO,CAACG,KAAK,KAAK,UAAU,EAAEX,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,GAAGF,OAAO,CAACK,MAAM;IACnG;;IAEA;IACAP,SAAS,GAAGE,OAAO,CAACC,IAAI,CAACC,GAAG;EAChC,CAAC,CAAC;EAEFN,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;EACtBC,OAAO,CAACC,GAAG,CAACL,eAAe,CAAC;AAChC;AAACe,EAAA,GAtCeb,kBAAkB;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}